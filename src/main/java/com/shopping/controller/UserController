package com.shopping.controller;
package com.shopping.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.shopping.model.Order;
import com.shopping.repository.OrderRepository;
import com.shopping.request.OrderRequest;
import com.shopping.request.OrderResponse;
import com.shopping.service.OrderService;

@RestController
@RequestMapping("/api/shopping")
@CrossOrigin
public class OrderController {
	
	@Autowired
	OrderService orderService;
	
	@Autowired
	OrderRepository orderRepo;
	
	@PostMapping("/craeteuser")
	@PreAuthorize("hasRole('USER')")
	public ResponseEntity<Object> createUser(@RequestBody UserRequest user) {
		return userService.createUser(user);
	}	
	
	@GetMapping("/getAllUsers")
	@PreAuthorize("hasRole('ADMIN')")
	public  List<UserResponse> getAllUsers() {
		return userService.getAllUsers();
	}
	
	@GetMapping("/getUserById/{userId}")
	@PreAuthorize("hasRole('ADMIN')")
	public  List<UserRespnse> getUserById(@PathVariable String userId) {
		return orderService.getUserById(userId);
	}
	
	  @DeleteMapping
	  @PreAuthorize("hasRole('ADMIN')")
	  public ResponseEntity<Object> deleteAllUsers(){
	    return userService.deleteAllUsers();
	  }
  
	  @DeleteMapping
	  @PreAuthorize("hasRole('ADMIN')")
	  public ResponseEntity<Object> deleteUserById(@PathVariable Strig userId){
	  	return userService.deleteUserById(userId);
	  }
	  
	  @PutMapping
	  @PreAuthorize("hasRole('USER')")
	  public ResponseEntity<Object> updateByUserId(@RequestBody User user){
	  	return userService.updateUserById(user);
	  }



    
  
}
